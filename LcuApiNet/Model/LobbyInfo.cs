// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace LcuApiNet.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WelcomeClass
    {
        [JsonProperty("data")]
        public LobbyInfo Data { get; set; }

        [JsonProperty("eventType")]
        public string EventType { get; set; }

        [JsonProperty("uri")]
        public string Uri { get; set; }
    }

    public partial class LobbyInfo
    {
        [JsonProperty("canStartActivity")]
        public bool CanStartActivity { get; set; }

        [JsonProperty("chatRoomId")]
        public Guid ChatRoomId { get; set; }

        [JsonProperty("chatRoomKey")]
        public Guid ChatRoomKey { get; set; }

        [JsonProperty("gameConfig")]
        public GameConfig GameConfig { get; set; }

        [JsonProperty("invitations")]
        public Invitation[] Invitations { get; set; }

        [JsonProperty("localMember")]
        public Member LocalMember { get; set; }

        [JsonProperty("members")]
        public Member[] Members { get; set; }

        [JsonProperty("partyId")]
        public Guid PartyId { get; set; }

        [JsonProperty("partyType")]
        public string PartyType { get; set; }

        [JsonProperty("restrictions")]
        public object[] Restrictions { get; set; }

        [JsonProperty("warnings")]
        public object[] Warnings { get; set; }
    }

    public partial class GameConfig
    {
        [JsonProperty("allowablePremadeSizes")]
        public long[] AllowablePremadeSizes { get; set; }

        [JsonProperty("customLobbyName")]
        public string CustomLobbyName { get; set; }

        [JsonProperty("customMutatorName")]
        public string CustomMutatorName { get; set; }

        [JsonProperty("customRewardsDisabledReasons")]
        public object[] CustomRewardsDisabledReasons { get; set; }

        [JsonProperty("customSpectatorPolicy")]
        public string CustomSpectatorPolicy { get; set; }

        [JsonProperty("customSpectators")]
        public object[] CustomSpectators { get; set; }

        [JsonProperty("customTeam100")]
        public object[] CustomTeam100 { get; set; }

        [JsonProperty("customTeam200")]
        public object[] CustomTeam200 { get; set; }

        [JsonProperty("gameMode")]
        public string GameMode { get; set; }

        [JsonProperty("isCustom")]
        public bool IsCustom { get; set; }

        [JsonProperty("isLobbyFull")]
        public bool IsLobbyFull { get; set; }

        [JsonProperty("isTeamBuilderManaged")]
        public bool IsTeamBuilderManaged { get; set; }

        [JsonProperty("mapId")]
        public long MapId { get; set; }

        [JsonProperty("maxHumanPlayers")]
        public long MaxHumanPlayers { get; set; }

        [JsonProperty("maxLobbySize")]
        public long MaxLobbySize { get; set; }

        [JsonProperty("maxTeamSize")]
        public long MaxTeamSize { get; set; }

        [JsonProperty("pickType")]
        public string PickType { get; set; }

        [JsonProperty("premadeSizeAllowed")]
        public bool PremadeSizeAllowed { get; set; }

        [JsonProperty("queueId")]
        public long QueueId { get; set; }

        [JsonProperty("showPositionSelector")]
        public bool ShowPositionSelector { get; set; }
    }

    public partial class Invitation
    {
        [JsonProperty("invitationId")]
        public string InvitationId { get; set; }

        [JsonProperty("invitationType")]
        public string InvitationType { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("timestamp")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Timestamp { get; set; }

        [JsonProperty("toSummonerId")]
        public long ToSummonerId { get; set; }

        [JsonProperty("toSummonerName")]
        public string ToSummonerName { get; set; }
    }

    public partial class Member
    {
        [JsonProperty("allowedChangeActivity")]
        public bool AllowedChangeActivity { get; set; }

        [JsonProperty("allowedInviteOthers")]
        public bool AllowedInviteOthers { get; set; }

        [JsonProperty("allowedKickOthers")]
        public bool AllowedKickOthers { get; set; }

        [JsonProperty("allowedStartActivity")]
        public bool AllowedStartActivity { get; set; }

        [JsonProperty("allowedToggleInvite")]
        public bool AllowedToggleInvite { get; set; }

        [JsonProperty("autoFillEligible")]
        public bool AutoFillEligible { get; set; }

        [JsonProperty("autoFillProtectedForPromos")]
        public bool AutoFillProtectedForPromos { get; set; }

        [JsonProperty("autoFillProtectedForSoloing")]
        public bool AutoFillProtectedForSoloing { get; set; }

        [JsonProperty("autoFillProtectedForStreaking")]
        public bool AutoFillProtectedForStreaking { get; set; }

        [JsonProperty("botChampionId")]
        public long BotChampionId { get; set; }

        [JsonProperty("botDifficulty")]
        public string BotDifficulty { get; set; }

        [JsonProperty("botId")]
        public string BotId { get; set; }

        [JsonProperty("firstPositionPreference")]
        public string FirstPositionPreference { get; set; }

        [JsonProperty("isBot")]
        public bool IsBot { get; set; }

        [JsonProperty("isLeader")]
        public bool IsLeader { get; set; }

        [JsonProperty("isSpectator")]
        public bool IsSpectator { get; set; }

        [JsonProperty("puuid")]
        public Guid Puuid { get; set; }

        [JsonProperty("ready")]
        public bool Ready { get; set; }

        [JsonProperty("secondPositionPreference")]
        public string SecondPositionPreference { get; set; }

        [JsonProperty("showGhostedBanner")]
        public bool ShowGhostedBanner { get; set; }

        [JsonProperty("summonerIconId")]
        public long SummonerIconId { get; set; }

        [JsonProperty("summonerId")]
        public long SummonerId { get; set; }

        [JsonProperty("summonerInternalName")]
        public string SummonerInternalName { get; set; }

        [JsonProperty("summonerLevel")]
        public long SummonerLevel { get; set; }

        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }

        [JsonProperty("teamId")]
        public long TeamId { get; set; }
    }

    public partial struct WelcomeElement
    {
        public long? Integer;
        public string String;
        public WelcomeClass WelcomeClass;

        public static implicit operator WelcomeElement(long Integer) => new WelcomeElement { Integer = Integer };
        public static implicit operator WelcomeElement(string String) => new WelcomeElement { String = String };
        public static implicit operator WelcomeElement(WelcomeClass WelcomeClass) => new WelcomeElement { WelcomeClass = WelcomeClass };
    }

    public class Welcome
    {
        public static WelcomeElement[] FromJson(string json) => JsonConvert.DeserializeObject<WelcomeElement[]>(json, LcuApiNet.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WelcomeElement[] self) => JsonConvert.SerializeObject(self, LcuApiNet.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                WelcomeElementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class WelcomeElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WelcomeElement) || t == typeof(WelcomeElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new WelcomeElement { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new WelcomeElement { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<WelcomeClass>(reader);
                    return new WelcomeElement { WelcomeClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type WelcomeElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (WelcomeElement)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.WelcomeClass != null)
            {
                serializer.Serialize(writer, value.WelcomeClass);
                return;
            }
            throw new Exception("Cannot marshal type WelcomeElement");
        }

        public static readonly WelcomeElementConverter Singleton = new WelcomeElementConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
